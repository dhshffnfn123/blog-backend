let Koa,Router,bodyParser,mongoose,api;_bd9‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_bd9‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_bd9‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_bd9‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_bd9‍.w("./api",[["default",["api"],function(v){api=v}]]);require('dotenv').config();







// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URI } = process.env;

// 서버에 연결할 때는 connect를 사용한다.
mongoose
.connect(MONGO_URI, { useNewUrlParser: true })
.then(() => {
    console.log('Connected to MongoDB');
})
.catch(e => {
    _bd9‍.g.console.error(e);
});

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes()); // api 라우트 적용

// 라우터 적용 전에 bodyParser 적용
app.use(bodyParser());

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const port = PORT || 4000;
app.listen(port, () => {
    _bd9‍.g.console.log('Listening to port %d', port);
});